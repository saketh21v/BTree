/*
========================== About the program =======================

This is a BTree implementation programmed in JAVA as an accomplishment of the Lab Assignment 1 , CSD 307  

========================= Configuration and Setup ==================

Java SE is freely available from the link http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html (jdk installation)
Download a version based on your operating system.
Follow the instruction in the given link to run the program: https://docs.oracle.com/javase/tutorial/essential/environment/paths.html

============================ Introduction ==========================

The program is an implementation of BTree which is a self-balancing tree data structure that keeps data sorted 
and allows searches, sequential access, insertions, and deletions in logarithmic time. The B-tree is a generalization
of a binary search tree in that a node can have more than two children. Tis includes functions like inserting numbers
in a batch or one by one, search them, to see the structure and retrieve the semantics of the BTree.
B-trees are balanced trees that are optimized for situations when part or all of the tree must be
maintained in secondary storage such as a magnetic disk. Since disk accesses are expensive (time
consuming) operations, a b-tree tries to minimize the number of disk accesses. For example, a b-tree with a
height of 2 and a branching factor of 1001 can store over one billion keys but requires at most two disk
accesses to search for any node. 


============================= Features ===============================

The program can be executed in two modes: test and user. Test mode provides the ability to insert about 1 million numbers at 
a time being randomly generated by the program. Tester can specify the order and efficiency of the Btree required and can
see the performance an semantics of the BTree structure created. The user mode allows the user to enter the integers one by
one or in a batch in the BTree structure. User is asked to specify the order and the efficiency required by the user. 
User can search, get a look of the structure and get the semantics of the BTree.


============================ Inputs and Outputs ======================

1) Insert function: Expects an integer to be input by the user and returns true/false based on the fact if it
   was successfully inserted or not.
2) Search function:Expects an integer to be searched and returns true/false based on the fact if the number was found
   and prints the contect of the node along with depth at which it is found.
3) Print BTree function: prints the structure of the tree.
4) Height/Size function: returns the number of integers inserted along with height achieved till that instant.
5) The Performance function: returns the time taken to insert/search the values.


=========================== Created By ===============================

Saketh Vallakatla 1410110352
Pranjal Mathur    1410110296
Prerna.           1410110306
*/

package btreepkg;

import java.util.HashSet;
import java.util.Scanner;

/**
 *
 * @author Saketh Vallakatla
 * @author Pranjal Mathur
 * @author Prerna
 */
public class BTreeMain {

    static BTree tree;
    static HashSet<Integer> newVals = new HashSet<>();
    static long time = 0;

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        System.out.println("-------------------------------------------------------");
        System.out.println("\tWELCOME TO BTree IMPLEMENTATION");
        System.out.println("-------------------------------------------------------");

        while (true) {
            System.out.println("\n\n Enter the prefixed number as required\n\n [1] BTree Information\n [2] Run in the test mode\n [3] Run in the user mode\n [4] Exit the program");
            System.out.print("\n Enter your choice: ");

            Scanner reader = new Scanner(System.in);  // Reading from System.in
            int n = reader.nextInt();

            if (n == 1 || n == 2 || n == 3 || n == 4) {
                if (n == 1) {
                    System.out.println("A B-tree is a tree data structure that keeps data sorted and allows searches, insertions, and deletions in logarithmic amortized time. Unlike self-balancing binary search trees, it is optimized for systems that read and write large blocks of data. It is most commonly used in database and file systems.");
                }

                if (n == 2) {
                    System.out.print(" \nEnter the order of the Btree you want to create:");
                    int order = reader.nextInt();
                    System.out.print(" \nEnter the efficiency you require (for example: if 45% efficiency is required, Enter 45):");
                    int eff = reader.nextInt();// BTree Order
                    int fOrder = (int) (((float) eff / 100) * order);
                    System.out.println("FORDER = " + fOrder);

                    System.out.print(" \nEnter the number of integers you want to insert:");
                    int numVals = reader.nextInt();//randoms numbers to be inserted

                    //write code to create BTree                    
                    tree = new BTree("BTrEE", fOrder);
                    System.out.println("ORDER = " + order);
                    while (newVals.size() < numVals) {
                        int val = (int) (Math.random() * numVals * 10);
                        newVals.add(val);
                    }

                    int[] vals = new int[numVals];
                    int i = 0;

                    for (Integer x : newVals) {
                        vals[i++] = x;
                    }

                    long tempT, tempT2;

                    for (int x : vals) {
                        tempT = System.currentTimeMillis();
                        tree.insert(x);
                        tempT2 = System.currentTimeMillis();
                        time += (tempT2 - tempT);
                    }
//                    tree.printBTree();

                    System.out.println("\n ***********BTree with " + numVals + " integers created************");

                    while (true) {
                        System.out.print(" \nWhat do you want to do?\n"
                                + "[1]See the integers inserted\n"
                                + "[2]See the BTree structure\n"
                                + "[3]See the performane\n"
                                + "[4]Exit the test mode.\n "
                                + "\n Enter your choice: ");

                        int q = reader.nextInt();
                        if (q == 1) {
                            //System.out.print("enter 1");
                            for (int x : newVals) {
                                System.out.println(x + ", ");
                            }
                        }
                        if (q == 2) {
//                              System.out.print("enter 2");
                            tree.printBTree();
                        }
                        if (q == 3) {
                            // System.out.print("enter 3");
                            System.out.println("Height: " + tree.getHighestLevel());
                            System.out.println("Time taken to create = " + ((double) time / Math.pow(10, 3)));
                        }
                        if (q == 4) {
                            break;
                        }
                    }
                }

                if (n == 3) {
                    System.out.println("1. Create new Tree\n"
                            + "2. Open existing tree");
                    int in = reader.nextInt();
                    time = 0;
                    if(in == 1){
                        System.out.print(" \nEnter the order of the Btree you want to create:");
                        int order = reader.nextInt();
                        System.out.print(" \nEnter the efficiency you require (for example: if 45% efficiency is required, Enter 45):");
                        int eff = reader.nextInt();// BTree Order
                        int fOrder = (int) (((float) eff / 100) * order);
                        System.out.println("FORDER = " + fOrder);
                        tree = new BTree("oldTree", fOrder);
                    }
                    
                    else if(in == 2){
                        tree = BTree.readTree("oldTree", "C:/Users/Saketh/Desktop/TestFolder/");
                    }
//                    System.out.println("\n\n*******BTree Structure Created.*******\n\n");
                    while (true) {
                        int op;
                        System.out.print("\n\nWhat do you want to do?\n [1]Insert Values\n [2]Get the semantics of the BTree\n"
                                + " [3]See the BTree sturcture\n [4]Search for a value\n [5]Exit the user mode. \n Enter your choice: ");
                        int p = reader.nextInt();
                        if (p == 1) {
                            System.out.print("\n How many intgers do you want to insert?");
                            int k = reader.nextInt();
                            long tempT,tempT2;
                            for (int m = 0; m < k; m++) {
                                System.out.println("Insert Value " + m);//insert values
                                op = reader.nextInt();
                                tempT = System.currentTimeMillis();
                                tree.insert(op);
                                tempT2 = System.currentTimeMillis();
                                time = tempT2 - tempT;
                            }
                            System.out.println(k + " integers inserted in the BTree");
                        }
                        if (p == 2) {
                            System.out.println("Height = " + tree.getHighestLevel());
                            //print order (Write code for changing order. Please :p)
                            //integers inserted
                            System.out.println("Integers inserted:" + tree.numVals);
                            System.out.println("Time taken:" + (double)time/Math.pow(10, 3));
                        }
                        if (p == 3) {
                            tree.printBTree();
                        }
                        if (p == 4) {
                            System.out.print("\n Enter the number you want to search for: ");
                            int lm = reader.nextInt();
                            tree.searchVal(lm);
                        }
                        if (p == 5) {
                            break;
                        }

                    }

                }
                if (n == 4) {
                    BTree.writeTree(tree, "C:/Users/Saketh/Desktop/TestFolder");
                    System.exit(0);
                }
            } else {
                System.out.print("Invalid Input");

            }
        }
    }
}
